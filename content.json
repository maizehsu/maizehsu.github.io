{"posts":[{"title":"The Start of Everything","text":"","link":"/2022/08/15/Start/"},{"title":"Leetcode 刷题笔记：Cpp STL总结自用","text":"Vector1#include &lt;vector&gt; 特点： 拥有一段连续的内存空间，并且起始地址不变，因此它能非常好的支持随机存取，但由于它的内存空间是连续的，所以在中间进行插入和删除会造成内存块的拷贝。另外，当该数组后的内存空间不够时，需要重新申请一块足够大的内存并进行内存的拷贝。这些都大大影响了 vector 的效率； 对头部和中间进行插入删除元素操作需要移动内存，如果你的元素是结构或类，那么移动的同时还会进行构造和析构操作，所以性能不高； 对最后元素操作最快（在后面插入删除元素最快），此时一般不需要移动内存，只有保留内存不够时才需要。 优点：支持随机访问，查询效率高。 缺点：当向其头部或中部插入或删除元素时，为了保持原本的相对次序，插入或删除点之后的所有元素都必须移动，所以插入的效率比较低。 适用场景：适用于对象简单，变化较小，并且频繁随机访问的场景。 构造函数 123456789101112//obj中含有obj_num个obj_init_value为值的typevector&lt;type&gt;obj(obj_num, obj_init_value);// obj1为obj2的复制vertor&lt;type&gt;obj1(obj2);// obj1为obj2的前三个元素复制vector&lt;type&gt;obj1(obj2.begin(), obj2.begin()+3);// 从数组中获得初值int a[7] = {1, 2, 3, 4, 5, 6, 7};vector&lt;int&gt; obj(a, a+7); push_back(elem), pop_back() 实现在容器最后添加/删除元素，顺序读取，迭代器读取 123456789101112131415// push_back(elem) 在数组最后添加数据for (int i = 0; i &lt; 10; i++) { obj.push_back(i); cout&lt;&lt;obj[i]&lt;&lt;&quot;,&quot;;} // 去掉数组最后一个数据for (vector&lt;int&gt;::iterator it=obj.begin(); it!=obj.end(); it++) { obj.pop_back();}//在第一个元素前面插入5vector&lt;int&gt;::iterator it;it = obj.begin();obj.insert(it, 5); clear() 清除所有数据，empty()判断是否为空 obj.front() 和 obj.back() 返回第一项和最后一项 begin() 得到数组头的指针，end() 得到数组的最后一个单元+1的指针 1234567891011121314151617#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main() { vector&lt;int&gt;obj; obj.push_back(1); obj.push_back(3); obj.push_back(0); sort(obj.begin(), obj.end()); //从小到大 reverse(obj.begin(),obj.end()); //从大到小 return 0;} 其他 12//查找10，若存在返回其在向量中的位置，需要include&lt;algorithm&gt; find(obj.begin(), obj.end(), 10); Deque1#include &lt;deque&gt; 特点： deque允许使用常数项时间对头端进行元素的插入和删除 操作； deque没有容量的概念，因为它是动态的以分段连续空间组合而成，随时可以增加一段新的空间并链接起来，换句话说，像vector那样“旧空间不足而重新配置一块更大空间，然后复制元素，再释放旧空间”这样的事情在deque身上是不会发生的。也因此，deque没有必须要提供所谓的空间保留(reserve)功能. 虽然deque容器也提供了Random Access Iterator,但是它的迭代器并不是普通的指针， 其复杂度和vector不是一个量级，这当然影响各个运算的层面； 除非有必要，我们应该尽可能的 使用vector，而不是deque。对deque进行的排序操作，为了最高效率，可将deque先完整的复制到一个vector中，对vector容器进行排序，再复制回deque。 优点：支持随机访问，查询效率高；可在两端进行push、pop。 缺点：不适合中间插入删除操作；占用内存高。 适用场景：只有需要在首端进行插入/删除操作的时候，还要兼顾随机访问效率，才选择deque，否则都选择vector。 构造函数 1234567891011//默认构造形式deque&lt;T&gt; deqT;//构造函数将[beg, end)区间中的元素拷贝给本身deque(beg, end);//构造函数将n个elem拷贝给本身deque(n, elem);//拷贝构造函数deque(const deque &amp;deq); 其他函数 12345678//返回容器中元素的个数deque.size();//判断容器是否为空deque.empty();//重新指定容器的长度为num，若容器变长，则以默认值填充新位置；如果容器变短，则删除末尾超出容器长度的元素deque.resize(num, elem); List1#include &lt;list&gt; 特点： 没有空间预留习惯，所以每分配一个元素都会从内存中分配，每删除一个元素都会释放它占用的内存； 在哪里添加删除元素性能都很高，不需要移动内存，当然也不需要对每个元素都进行构造与析构了，所以常用来做随机插入和删除操作容器； 访问开始和最后两个元素最快，其他元素的访问时间一样。 优点：内存不连续，动态操作，可在任意位置插入或删除且效率高。 缺点：不支持随机访问。 适用场景：经常进行插入和删除操作并且不经常随机访问的场景。 构造函数 123456789// 创建一个包含 n 个元素的 list 容器，并为每个元素指定初始值list&lt;int&gt; value1(10, 5);// 在已有 list 容器的情况下，通过拷贝该容器可以创建新的 list 容器list&lt;int&gt; value2(value1);//通过拷贝其他类型容器（或者普通数组）中指定区域内的元素，可以创建新的 list 容器int a[] = { 1,2,3,4,5 };std::list&lt;int&gt; values(a, a+5); 删除特定位置元素 1val.erase(pos); Set1#include &lt;set&gt; 特点： set 中的元素都是排好序的，集合中没有重复的元素; map 和 set 的插入删除效率比用其他序列容器高，因为对于关联容器来说，不需要做内存拷贝和内存移动。 优点：使用平衡二叉树实现，便于元素查找，且保持了元素的唯一性，以及能自动排序。 缺点：每次插入值的时候，都需要调整红黑树，效率有一定影响。 适用场景：适用于经常查找一个元素是否在某群集中且需要排序的场景。 特点1：不重复，自动排序 1234567891011set&lt;int&gt; setT;setT.insert(3);setT.insert(1);setT.insert(2);setT.insert(1);set&lt;int&gt;::iterator it;for (it = setTemp.begin(); it != setTemp.end(); it++) { cout &lt;&lt; *it &lt;&lt; &quot; &quot;;} 特点2：关联性容器，键值对默认1，2，3 multiset可以包含重复元素 unordered_set用哈希表存储，无序但查找快 Map1#include &lt;map&gt; 特点： 自动建立 Key - value 的对应。key 和 value 可以是任意你需要的类型； 根据 key 值快速查找记录，查找的复杂度基本是 O(logN)，如果有 1000 个记录，二分查找最多查找 10次； 增加和删除节点对迭代器的影响很小，除了那个操作节点，对其他的节点都没有什么影响； 对于迭代器来说，可以修改实值，而不能修改 key。 优点：使用平衡二叉树实现，便于元素查找，且保持了元素的唯一性，可以创建字典； 缺点：每次插入值的时候，都需要调整红黑树，效率有一定影响。 适用场景：适用于需要存储一个数据字典，并要求方便地根据key找value的场景。 构造函数 12345678// 创造一个键值对std::map&lt;std::string, int&gt; myMap;// 提前进行初始化std::map&lt;std::string, int&gt; myMap{ {&quot;C语言教程&quot;,10},{&quot;STL教程&quot;,20} };// map 容器中存储的键值对，其本质都是 pair 类模板创建的 pair 对象std::map&lt;std::string, int&gt;myMap{std::make_pair(&quot;C语言教程&quot;,10), std::make_pair(&quot;STL教程&quot;,20)}; Summarize 特点 vector 头部与中间插入和删除效率较低，在尾部插入和删除效率高，支持随机访问； deque 是在头部和尾部插入和删除效率较高，支持随机访问，但效率没有 vector 高； list 在任意位置的插入和删除效率都较高，但不支持随机访问； set 由红黑树实现，其内部元素依据其值自动排序，每个元素值只能出现一次，不允许重复，且插入和删除效率比用其他序列容器高； map 可以自动建立 Key - value 的对应，key 和 value 可以是任意你需要的类型，根据 key 快速查找记录。 适用场景 如果需要高效的随机存取，不在乎插入和删除的效率，使用 vector； 如果需要大量的插入和删除元素，不关心随机存取的效率，使用 list； 如果需要随机存取，并且关心两端数据的插入和删除效率，使用 deque； 如果打算存储数据字典，并且要求方便地根据 key 找到 value，一对一的情况使用 map，一对多的情况使用 multimap； 如果打算查找一个元素是否存在于某集合中，唯一存在的情况使用 set，不唯一存在的情况使用 multiset。 时间复杂度 vector 在头部和中间位置插入和删除的时间复杂度为 O(N)，在尾部插入和删除的时间复杂度为 O(1)，查找的时间复杂度为 O(1)； deque 在中间位置插入和删除的时间复杂度为 O(N)，在头部和尾部插入和删除的时间复杂度为 O(1)，查找的时间复杂度为 O(1)； list 在任意位置插入和删除的时间复杂度都为 O(1)，查找的时间复杂度为 O(N)； set 和 map 都是通过红黑树实现，因此插入、删除和查找操作的时间复杂度都是 O(log N)。 Reference [1]. https://zhuanlan.zhihu.com/p/130905242 [2]. https://blog.51cto.com/u_15452541/4955600","link":"/2022/08/15/STL/"},{"title":"绝佳的旅游电影：Ground Control to Major Tom","text":"今天和朋友奔着轻松愉快的目标，在机缘巧合下受标题吸引，选了这部轻喜剧电影。没想到，电影内核和最近反复思考咀嚼的一些想法很是相似，不得不说是意外之中的惊喜。 电影前半段节奏慢了些，男主的想象支撑起了大多数情节和笑点。在中段介绍男主父亲去世的时候，终于读出了作品主题：Live a Life。父亲从小给男主做发型，带男主玩 cool stuff，代表男主内心 adventurous，passionate 的一面。父亲的去世两天后，Walter 剪了头，去披萨店找了份 ordinary job，从此封闭自己做白日梦，一 ordinary，便 ordinary 到了中年。之后 Walter 走遍世界（旅游电影上线，北欧部分都是实拍哦），卖掉象征对父亲去世执念的老钢琴，鼓起勇气对自己心爱的姑娘 open up，登上杂志封面，明白人生之精彩在于大胆追逐，用力生活。 Walter 在电影中是多么幸运：拥有一个 supportive family，母亲注重大局，能够独立照顾自己不拖累子女，妹妹有理想抱负，关心，用热情感染哥哥；拥有说走就走的能力（一本丑国护照）；自己心爱的妹子愿意包容他，等他觉醒，找寻自我，还在 Walter 不敢搭讪的时候主动约他，找话题；实在是大幸。三者任其一，对于我们普通人来说大抵都称得上是毕生难求。有这样的环境和前提条件，才有自由追逐人生 passion and meaning 的资本。因此，这样的美式鸡汤价值观固然 hopeful，但想想就行了。 真正驱使 Walter 改变心态 not to be ordinary 的 moment 是在他在最后一刻决定登上了去冰岛的飞机。临上飞机前，Walter 想象女主唱了 David Bowie 的 Space Oddity，原片保留了火箭起飞的 whispering 倒计时，当原曲火箭喷发的声音和直升机螺旋桨旋转起飞的声音重合， Ground Control to Major Tom (ten, nine, eight, seven, six) Commencing countdown, engines on (five, four, three) Check ignition and may God’s love be with you (two, one, liftoff) 当原曲唱到 Major Tom 踏出舱门，拥抱宇宙，和直升机飞越丹麦海峡，背景冰山小镇的美景交相辉映， I’m stepping through the door And I’m floating in a most peculiar way And the stars look very different today 不可谓是不震撼。 不过现实中，Major Tom 并非和女主鼓励男主时所说的，是励志角色。在 Space Oddity 的最后，Major Tom 和 Ground Control 失去联系，独自飘向宇宙。而这个 character 在 David Bowie 的另一首歌 Ashes to Ashes 中被鉴定为 junkie，大抵这几首歌都有隐喻 drug abuse 的意思，不过那都是后话了。说不定女主也知道，只是人家真的对 Walter 好，才 tell a white lie 呢。 看完电影和朋友聊了许久最近的困惑，为什么坚持离开自己的舒适圈，走出去看看这世界。仔细思考了下，原因其中之一得是，奢望在拥抱世界，体验多元，尝试包容的过程中，更加了解自己，过些自己想要的生活，进而 pursue some happiness。回首一路，从小到大在国内最优秀的学校长大，毒害自己最多的是内卷和竞争的心态和名校情结。若想 let go，inevitably 需要踏出这一步。朋友给予的临别礼物上赠言 “Live Big”，意在祝福我在全新环境下逐梦成功。我也希望她能够 stop living an ordinary life, stop following the given path，相信自己，勇敢的踏出这一步。 电影中 Space Oddity 插曲结束前，飞行员对 Walter 说 “*Hey, I’m glad you came.*” 希望若干年后的自己回首此时此刻，也能对自己说出一样的话，感谢现在的自己做出看看这世界的决定。 Live Big, Live Happy, Live a Life。","link":"/2022/08/15/%E5%BD%B1%E8%AF%84%EF%BC%9A%E7%99%BD%E6%97%A5%E6%A2%A6%E6%83%B3%E5%AE%B6/"}],"tags":[{"name":"随想","slug":"随想","link":"/tags/%E9%9A%8F%E6%83%B3/"},{"name":"Leetcode","slug":"Leetcode","link":"/tags/Leetcode/"},{"name":"秋招","slug":"秋招","link":"/tags/%E7%A7%8B%E6%8B%9B/"},{"name":"影评true","slug":"影评true","link":"/tags/%E5%BD%B1%E8%AF%84true/"}],"categories":[{"name":"Dailies","slug":"Dailies","link":"/categories/Dailies/"},{"name":"Tech","slug":"Tech","link":"/categories/Tech/"},{"name":"Reviews","slug":"Reviews","link":"/categories/Reviews/"}],"pages":[]}