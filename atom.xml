<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mai&#39;s Blog</title>
  
  
  <link href="https://maizehsu.me/atom.xml" rel="self"/>
  
  <link href="https://maizehsu.me/"/>
  <updated>2024-01-01T08:39:14.771Z</updated>
  <id>https://maizehsu.me/</id>
  
  <author>
    <name>Mai Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023 年终总结</title>
    <link href="https://maizehsu.me/2024/01/01/yearly-summary-2023/"/>
    <id>https://maizehsu.me/2024/01/01/yearly-summary-2023/</id>
    <published>2024-01-01T05:00:00.000Z</published>
    <updated>2024-01-01T08:39:14.771Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>引言：我的生命由浑浑噩噩的忙碌与无处安放的情感组成；我的思想被他人的言论与自我的谴责左右；我的行为未受原则和目标的约束。这些都是因为我不够自知，缺乏经历与积累，尚未形成自我价值体系。如果我不能认清 2023 年何所来，就无法看清 2024 年何从去，所谓辞旧迎新，便是空洞的抒情。因此，在迎接 2024 年的到来之际，我对 2023 年做出如下总结：</em></p><p><strong>做有用的事，而不是正确的事。</strong> 2022 年，我花了许多时间探索什么是正确的事情，但由于自身缺乏经历和积累，免不了带来很多内耗。2023 年最大的变化是将更多时间花在了埋头干：读书、写作、实习、秋招、练琴。其实纵观科学史，过去被时人推崇的理论和社会体制，最终都被后人以更先进的观察和推理所推翻。因此 “正确” 是相对而暂时的，做有用的事更为实际。关于如何判断什么是有用的事，李沐老师说 <a href="https://www.bilibili.com/read/cv11414235/#:~:text=%E4%BA%8B%E6%83%85%E7%9A%84%E4%BB%B7%E5%80%BC%E6%98%AF%E5%AF%B9%E7%A4%BE%E4%BC%9A%E7%9A%84%E4%BB%B7%E5%80%BC">事物的价值是对社会的价值</a>，我的水平自然未达到在社会层面做贡献，但我至少能做的是提升自己，投入更多时间和精力于家人朋友，并尽力帮助他人，在自己所处的圈子中扩大影响力。</p><p><strong>迭代自己的认知框架。</strong> 走出学生时代，人生中大小的问题常是开放性，既没有明确的输入输出，也缺乏量化指标。认知水平决定了我们解决问题的能力。我欣赏的一位 up <a href="https://space.bilibili.com/119801456">老蒋巨靠谱</a> 分享了自己的 <a href="https://www.bilibili.com/video/BV1FV411y7vN/">认知框架</a>。一年的实践下来，我参考了视频中的一些点，构建了自己认知迭代方法：一是通过行动。行动推动思考，而不是反之。在有了初步方案后就开始行动，之后通过试错反馈调整方案。二是通过摄取优质信息。我们需要足够的信息量，当问题来到时才能产生足够多的联想和独特的视角。这里的关键首先在于拒绝 <a href="https://en.wikipedia.org/wiki/Recommender_system">推荐系统</a>，自建订阅制的信息流。我会在每周的一个晚上阅读 RSS 订阅的博客，清空 Bilibili, YouTube 等视频平台的动态，并关注 CDT 等时事。此外是有效利用碎片时间：献给音乐，读书和思考，或是仅仅是发呆（<a href="https://journals.aom.org/doi/abs/10.5465/amd.2017.0033">Boredom actually increases productivity！</a>）。年底这几周开始尝试听播客，明年计划探索更多信息获取渠道，届时会再写文章分享。</p><p>最后想多说一句的是，现实世界中的问题充满不确定性，运气和大环境这些不可控因素往往是决定最后结果的关键。每每想到这点都极易产生对人生无力掌控的虚无感。我不喜欢这种无力感，因此明白有两个方向我能够控制并提升，是消除虚无主义的良药。</p><p><strong>做优化时在想得准确的条件下尽量定得远一些，但不用太远。</strong> 我观察到身边同学常见的 Pitfall 是在做优化时会被自己的学历和能力所限制。举一个例子，有些交密的同学会盲目地因为自己优秀的双本科，从而把申请四大研究生作为阶段性目标，而没有意识到大多美研项目的本质是学校的盈利工具，真正有价值的是毕业后的 OPT。实际上，名校背景和陆本自带能吃苦的能力应该帮助我们前进，而不是限制我们的发展。比如我们可以多去主动 reach out 校友，或是将能吃苦转化为长时间专注的能力。</p><p>外面的世界在不断变化，若我们在年初定好目标后就闭门造车，那想必不是最佳选择。我的解决办法是每周花些时间思考大问题：我想成为怎样的人？什么是对我来说有价值的事？我是否已经把所有可用资源集中在最有价值的事情上？效率的本质在于将时间投入到真正重要的事情上，而不仅仅是提高单位时间的产出。阶段性微调方向，尽力看得远一些 - 也不必太远，因为我们预测不到十年后的世界会是什么样子 - 为三年后的自己做规划。以我为例，我的三年优化目标是在 OPT 期间交上 I140，而不仅仅是毕业后拿到 200k 的包裹。</p><p><strong>认识到 Compound Interest 的力量。</strong> 种一棵树最好的时间是十年前，其次是现在。对此，我的感悟是自律的本质不是靠意志力，而是设计好的系统后的累积惯性。以早起为例，一个好的系统设计包括两部分：首先，我会提前规划第二天的 5AM Project。这个项目可以是我需要做的（ddl，准备秋招），也可以是我想做的（读书，写作），亦或是探索一个和我之前生活完全不相关的新领域。其次，了解自己的身体机制，采用科学的睡眠和起床的技巧，如起床后接触光照，何时喝多少量的咖啡。明确早起于我的价值（本质是和时间田忌赛马），并连续执行一周，生物钟便会形成惯性，从而使这样的作息非常容易保持。随着养成的健康和效率习惯越来越多，它们的累积特性会带来 Compound Interest，which I believe in the long run is what makes you stand out amongst others。</p><p><strong>内卷无意义，人生其实是和不确定性作斗争。</strong> 不确定性总是要面对的，而焦虑和内卷只是对此问题的逃避和拖延。这个命题上我从 <a href="https://en.wikipedia.org/wiki/Stoicism#:~:text=Stoicism%20is%20a%20school%20of,%3A%20a%20well%2Dlived%20life.">Stoicism</a> 中获益良多。Stoicism 的核心思想有二，第一步是识别并区分问题中可控和不可控的部分，第二步是尽力控制可控的方面，而不对不可控的部分纠结。其中 ”尽力控制可控的“ 即前文提到的认知和系统。为了做到 “不为不可控的纠结”，我们可以将许多问题建模为风险和回报的 Tradeoff。更具体地说，是在能够接受最坏的结果的前提下，计算最合适的风险回报比率来进行规划。</p><p>出来读书后跟很多人聊天，我才后知后觉地意识到自己是 <a href="https://www.zhihu.com/question/352745667/answer/982316862">出生在上海是多么幸运</a>。这不仅意味着我在较小的竞争环境中享受到了比人口大省更优质的教育资源，更重要的是，我的父母有能力供我出国读书，并从小为我提供了一个观察世界和思考的平台。人与人的起点太不一样，有的父母给孩子出生礼物是一蓝一绿护照，走遍世界的洒脱和自由，这当然是极好的。我的父母则给予了我他们能力范围内能提供的最大程度的爱和自由。正是因为接受了良好的教育，以及父母倾注予我充裕但不宠溺的爱，才使得我现在拥有传播爱和善良的愿望，和追求自由的能力。每每想到这些，我总会想起杨绛先生提到的“<a href="https://www.zhihu.com/question/29294958/answer/87936555">多吃多占的人对不幸者对愧怍</a>”。这已然非常好地诠释了内卷的无意义，只有走自己的路，才能寻找属于自己的幸福。 I realized how privileged I am this whole life, and that there’s absolutely no meaning in chasing what others defines as “success”.</p><p><strong>很开心自己仍在意，仍然坚持原则和理想：它们并未因生活的琐碎或对权力的恐惧而消退。</strong> 最后一点比较私人，但对我同样重要。去年夏秋，我总担心随着年岁增长，自己会变得对现实麻木，对不公沉默，向强权妥协。幸好，至少在这一年，这并未发生。<a href="https://www.youtube.com/watch?v=38_thLXNHY8">封城</a> 和 <a href="https://zh.wikipedia.org/zh-hans/%E7%99%BD%E7%B4%99%E9%81%8B%E5%8B%95">白纸运动</a> 让我意识到，尽管单纯的爱心和自救的作用有限，但人们的遭遇与公共生活紧密相连，因此关心那些具体的人和事是有意义的。我从来没有什么救国志向，但我也无法摆脱“幸者对不幸者的愧怍”。做有用的事，作为一名理工科出身的大学生和知识分子，提出解决办法是不现实的。但我能做的一方面是关注平凡人的生活，通过阅读和写作传播公共知识，普及公民教育。另一方面，努力赚钱 make impact，通过为世界创造价值，并尽我所能将多余的价值用于帮助受苦的人们。</p><p>前几天，我在整理 B 站收藏夹时翻到 <a href="https://chinesefootball.bandcamp.com/">Chinese Football</a> 乐队在疫情时举办的一场 <a href="https://www.bilibili.com/video/BV197411x7nW">Live</a>。当听到紫莉妹妹唱着 “吃人的怪物 善变的天”，突然觉得找到了人生句子。和他们做斗争，可能会是我接下来人生中的两大主旋律。</p><p>文章最后，很喜欢李沐老师的一段话，这几年困难的时候都会拿出来读，常读常新。我斗胆在这里引用，希望在新的一年和自己共勉：</p><blockquote><p>如果把这五年的感悟精炼成一句话的话，会是很平淡的一句：专注于最有价值的事情。首先，你需要对价值有清晰的认识。接着，对一件事情，不仅是要认识当下的价值，更多的是对未来价值的预测。其次，当你通过不断的快速试错对未来有了把握的时候，你需要逐步的把你能调用的资源专注到最有价值的那一件事情上，尽你可能的做好。</p><p>如果一生中能做好几件有着极大价值的事，那也就值了。</p><p>— 《<a href="https://www.bilibili.com/read/cv11414235/">工作五年反思</a>》李沐</p></blockquote>]]></content>
    
    
    <summary type="html">吃人的怪物 善变的天</summary>
    
    
    
    <category term="Dailies" scheme="https://maizehsu.me/categories/Dailies/"/>
    
    
    <category term="年度总结" scheme="https://maizehsu.me/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2022 年终总结</title>
    <link href="https://maizehsu.me/2023/01/11/yearly-summary-2022/"/>
    <id>https://maizehsu.me/2023/01/11/yearly-summary-2022/</id>
    <published>2023-01-11T05:00:00.000Z</published>
    <updated>2023-03-20T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 align="center">2023 自我欺骗宣言</h1><blockquote><p>参考：<a href="https://mp.weixin.qq.com/s/M8PwGgEwj9Pvm8MRp_6KoQ">光华楼顶的黑石碑 | 2023 自我欺骗宣言</a></p></blockquote><p>我的生命由浑浑噩噩的忙碌与无处安放的情感组成。我的思想被他人的言论与自我的谴责左右。我的行为不能被理想和目标约束。这些都是因为我不够成熟，缺乏足够的经历与积累，尚未形成完善的自我价值体系</p><p>如果我不能认清 2022 年何所来，就无法看清 2023 年何从去，那么所谓辞旧迎新，就是空洞的抒情。因此，在迎接 2023 年的到来之际，我对 2022 年做出如下总结：</p><p><strong>这一年，你迷惑，失落，彷徨。</strong></p><p>你看到了具体的人在承受具体的苦，老人离世的家庭，露宿街头的打工仔，被捕的市民，失业的年轻人。</p><p>你看到了荒诞与谎言，极端的公权力，以及愚昧的思想。正直勇敢的声音被埋没，在充斥着假话的舆论场，扛住了生活的平凡人以讹传讹，自我感动。</p><p>你也看到了许多人怀揣着不同的向往，做了很多具体的事缓解具体的苦，为落难的人们维护最后的尊严；成千上万的网民在互联网哭墙下分享和倾诉，相互告慰，安放那些再无处去的良心。</p><p>你意识到这个世界并不总是在进步，在不公正的体制面前，痛哭流涕无济于事，而爱心和自救的作用也是有限的。</p><p>你还意识到人们的遭遇与公共生活紧密相连。你从来没有像这一年这样，深切体会到公共生活之于个人的意义。</p><p><strong>这一年，你学会了呐喊。</strong></p><p>昂首，拒默沉，白纸飞扬。</p><p>你和黑暗中的年轻人一同为自由呐喊，手中传单，墙头海报上写着共同愿望。</p><p>你相信越来越多的人会加入，“只要有一个微薄的声音出现，我就狂奔过去和他站在一起，这就够了。”</p><p>你读了些书，知道自己对于自由理想社会的追求幼稚至极，</p><p>但你相信并践行具体的善，你祈求老百姓的安康，你的愿望是在这片土地上，泪不再流。</p><p><strong>这一年，你第一次离开了家乡。</strong></p><p>你呼吸着自由社会的空气，真切地感受到国家和制度的发达能够给老人孩子带来幸福，平凡人之间少了戾气，和气融融。</p><p>然而，你也意识到现实的残酷，在异国他乡自己终究是外人，社会福利与多数工作机会与你无关，若想在这里立足，势必要为身份而奋斗。</p><p>你时常在不经意间感受到与故乡的牵连。华人小店的货架，一口家乡的美食，熟悉的街头飘香，都让你瞬间有了种亲切感，似乎千里之外，家乡就近在咫尺。</p><p>你痛恨在自由和家乡之中只能择其一。尽管你明白在陌生土地扎根的孤独，但此生若是选择了安逸，也只是把同样艰难的选择留给下一代。</p><p><strong>这一年，请你不要忘记。</strong></p><p>请不要忘记曾经的愤怒和悲伤，不要忘记你所爱和所恨。</p><p>请不要忘记空白，不要忘记黑暗；不要忘记空荡荡的街道，不要忘记人声鼎沸的校园。</p><p>请不要忘记最初的选择；不要忘记星光下的誓言与理想。</p><p><strong>这一年，请你不要恐惧。</strong></p><p>请不要恐惧自由的代价，虽然成为奴才很安逸。</p><p>请不要恐惧未来的不确定性，即使在当下用内卷和短视频麻痹来自己很容易。</p><p>请不要害怕触碰和拓宽自己认知和生活的边界，即使宣称了解自己能欺骗所有人。</p><p>面对自身的惯性和懒惰，请不要妥协和顺从。</p><p>面对系统性的不公正，请不要温柔地走进 2023 年。</p><p><strong>这一年，请你继续坚持。</strong></p><p>坚持追问自己与社会的关系，并牢记自己的道德底线。</p><p>坚持运动和练琴，坚持阅读和记录。</p><p>请你坚定地走自己的路，只有取悦自己，你才有成为自己的可能。</p><p>一切都在飞速变化，昨天的哀痛会变成明天的笑柄，然后在后天变成被遗忘的历史。我不得不承认我的懦弱，懒惰，愚蠢和脆弱。我不得不正视我思想的贫瘠，行动的乏力。</p><p>因此，为了成功地自我欺骗，以达到保证身心健康，可以在 2023 年追求表面的幸福的目的，作为这个时代有自由思想，公民意识的新青年，我在此对 2023 年作出以下十条宣言：</p><ol><li><strong>2023 年是特别的一年，这一年我将改变生活方式与观念，成为一个更好的自己；</strong></li><li><strong>我将多出去走走，无论是精神还是现实。走出自我设定的信息茧房，走出固定的生活轨迹；</strong></li><li><strong>我将克制自己的情感与欲望，不对任何人心怀无谓的幻想，不在无用的人际关系上浪费时间，清心寡欲，离群索居；</strong></li><li><strong>我将少刷手机，拒绝无意义的短视频，记住自己每次打开手机时的目的；</strong></li><li><strong>我将阅读更多书籍，并时刻牢记，人类世界的最高智慧，都写进了书中，陈列在免费的图书馆；</strong></li><li><strong>我将坚持记录，记录我的情绪，我的思想，我视角中的世界；</strong></li><li><strong>我将学会感受，学会静下心停在当下的时空，不遗憾地怀念过去，不焦急地盼望未来；</strong></li><li><strong>我将培养健康的习惯与爱好，认真把握时间，以每天践行他们；</strong></li><li><strong>我将始终心怀梦想，以清醒迎接每一个清晨，以平静告别每一个夜晚；</strong></li><li><strong>我将坚信，世界上会有更多爱与和平，我的生活也是。</strong></li></ol><p>在新的一年，我将坚信以上每一条宣言，积极地进行自我欺骗，继续开心而无忧无虑地生活在这个世界上。</p>]]></content>
    
    
    <summary type="html">但你相信并践行具体的善，你祈求老百姓的安康，你的愿望是在这片土地上，泪不再流。</summary>
    
    
    
    <category term="Dailies" scheme="https://maizehsu.me/categories/Dailies/"/>
    
    
    <category term="年度总结" scheme="https://maizehsu.me/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Maize 的小站 v1.0 发布 🎉</title>
    <link href="https://maizehsu.me/2022/10/10/13-v1-0-changelog-roadmap-acknowledgement/"/>
    <id>https://maizehsu.me/2022/10/10/13-v1-0-changelog-roadmap-acknowledgement/</id>
    <published>2022-10-10T06:45:10.000Z</published>
    <updated>2023-08-01T16:33:34.969Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Date: 2022.8.20</strong></p><blockquote><p>Maize’s Blog finally reaches v1.0 🎉🎉🎉 </p></blockquote><p>第一次有搭建个人网站的想法是在 8.12 晚上。一是希望通过图文的形式记录自己即时的想法，给值得留住的回忆存一份快照。二是以个人博客作为平台，不仅能绕过国内的审核机制畅所欲言，更是与愿意和我互动的朋友们保持长期联系的一种方式。最近一周从零开始的建站离不开<a href="#%E8%87%B4%E8%B0%A2">你们</a>，也欢迎未来光临的朋友们留下宝贵的建议，帮助小站走向更好！</p><h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><p>These features have been implemented in v1.0:</p><h3 id="User-Experience"><a href="#User-Experience" class="headerlink" title="User Experience"></a>User Experience</h3><ul><li><input checked="" disabled="" type="checkbox"> 优化文章页面阅读体验<ul><li><input checked="" disabled="" type="checkbox"> 页面两栏布局</li><li><input checked="" disabled="" type="checkbox"> 整文章卡片宽度</li><li><input checked="" disabled="" type="checkbox"> 文章目录组件悬浮</li></ul></li><li><input checked="" disabled="" type="checkbox"> 优化首页视觉体验<ul><li><input checked="" disabled="" type="checkbox"> 增加文章卡片：cover image + 简介</li><li><input checked="" disabled="" type="checkbox"> 优化文章卡片：添加 tag</li></ul></li><li><input checked="" disabled="" type="checkbox"> 增加夜间模式<ul><li><input checked="" disabled="" type="checkbox"> 夜间模式背景星空动画</li><li><input checked="" disabled="" type="checkbox"> 移动端夜间模式适配</li></ul></li></ul><h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><ul><li><input checked="" disabled="" type="checkbox"> 设计网站 favicon</li><li><input checked="" disabled="" type="checkbox"> 重新设计左下角页脚排版<ul><li><input checked="" disabled="" type="checkbox"> 版本号信息</li><li><input checked="" disabled="" type="checkbox"> 站点访问统计</li><li><input checked="" disabled="" type="checkbox"> 问候语</li></ul></li><li><input checked="" disabled="" type="checkbox"> 重新设计滚动条样式</li><li><input checked="" disabled="" type="checkbox"> 鼠标悬浮卡片淡出效果</li><li><input checked="" disabled="" type="checkbox"> 白天和夜间模式下首页 tag 配色更改</li></ul><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><ul><li><input checked="" disabled="" type="checkbox"> 自定义域名</li><li><input checked="" disabled="" type="checkbox"> Https 安全加密</li><li><input checked="" disabled="" type="checkbox"> Email RSS 订阅 Blog 更新</li><li><input checked="" disabled="" type="checkbox"> 评论功能：绑定 Github Issue</li><li><input checked="" disabled="" type="checkbox"> 文章置顶功能，即公告栏</li><li><input checked="" disabled="" type="checkbox"> 个人 Profile 栏<ul><li><input checked="" disabled="" type="checkbox"> 主页链接</li><li><input checked="" disabled="" type="checkbox"> Email me</li><li><input checked="" disabled="" type="checkbox"> CV 下载</li></ul></li><li><input checked="" disabled="" type="checkbox"> 规范文章路由</li></ul><h2 id="Roadmap"><a href="#Roadmap" class="headerlink" title="Roadmap"></a>Roadmap</h2><p>These features are to be implemented in the future:</p><ul><li><input disabled="" type="checkbox"> 小站留言板</li><li><input disabled="" type="checkbox"> 增加许可协议 creative commons license </li><li><input disabled="" type="checkbox"> 一键生成文章分享卡片</li><li><input disabled="" type="checkbox"> 爬取豆瓣书单，片单信息，Goodreads 书单信息</li><li><input disabled="" type="checkbox"> Add Giscus for comment system and migrate previous comments from github issue to discussion<ul><li><input disabled="" type="checkbox"> dynamic theme changing</li><li><input disabled="" type="checkbox"> direct and recursive reply to comments</li><li><input disabled="" type="checkbox"> emoji reply to articles</li></ul></li><li><input disabled="" type="checkbox"> 部署 atag-player 代替外链音乐</li><li><input disabled="" type="checkbox"> 图床托管在 github 服务器，在国内浏览需要 VPN ：后续配置 CDN 加速</li><li><input disabled="" type="checkbox"> 增加配置项：文章加密</li></ul><h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><p>These issues remain after v1.0:</p><ul><li><input disabled="" type="checkbox"> About 页面尚未部署</li><li><input disabled="" type="checkbox"> 未配置 Namecheap DNS Record</li><li><input disabled="" type="checkbox"> 夜间模式下 email subscribe icon 在点击输入框后颜色显示偏暗</li><li><input disabled="" type="checkbox"> 夜间模式下首页文章标题显示链接下划线</li><li><input disabled="" type="checkbox"> 评论系统不支持动态切换主题</li><li><input disabled="" type="checkbox"> 文章点击数量统计错误显示为所有文章总量</li></ul><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢 <strong><a href="https://github.com/MaryBioinfo">@MaryBioinfo</a></strong> 和 <strong>Wendy同学</strong> 给予宝贵的用户体验反馈，并提出许多超棒的改进需求！小站从零走向 v1.0 离不开你们！</p>]]></content>
    
    
    <summary type="html">v1.0 changelog &amp;&amp; roadmap &amp;&amp; 致谢</summary>
    
    
    
    <category term="Announcement" scheme="https://maizehsu.me/categories/Announcement/"/>
    
    
    <category term="公告" scheme="https://maizehsu.me/tags/%E5%85%AC%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Icarus (2) | Bulma notes for future blog layouts</title>
    <link href="https://maizehsu.me/2022/09/21/14-bulma-notes-for-future-blog-layouts/"/>
    <id>https://maizehsu.me/2022/09/21/14-bulma-notes-for-future-blog-layouts/</id>
    <published>2022-09-20T21:00:00.000Z</published>
    <updated>2022-09-20T21:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这两天做小站 feature 的时候大致研究了下 Icarus 主题源码，从 <code>../include/style/base.styl</code> 中了解到 Icarus 用了 <a href="https://bulma.io/">Bulma</a> 作为前端框架。Bulma 本质上是一个一万多行的 css 文件。因此，若是想让博客中出现 markdown 语法支持之外的 rich-text or responsive 的功能，需要 refer to Icarus 引入的 Bulma class （Icarus 自己 oveeride 了一些 Bulma class，并不是全部引入）。本文整理了一些以后可能用到的排版，也贴上了相应的 html 代码方便调用。更多相关用法请见 <a href="https://bulma.io/documentation/">Bulma 文档</a> 。</p><h2 id="Modifier-Syntax"><a href="#Modifier-Syntax" class="headerlink" title="Modifier Syntax"></a>Modifier Syntax</h2><p>Most Bulma elements have alternative styles. To apply them, you only need to append one of the modifier classes. They all start with <code>is-</code> or <code>has-</code>.</p><p>Let’s start with a simple button that uses the “button” CSS class:</p><p><button class="button"> Button </button></p><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span> Button <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can use one of the 5 main colors:</p><div class="buttons">    <button class="button is-link"> link </button>    <button class="button is-info"> info </button>    <button class="button is-success"> success </button>    <button class="button is-warning"> warning </button>    <button class="button is-danger"> danger </button></div><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-link&quot;</span>&gt;</span> link <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-info&quot;</span>&gt;</span> info <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-success&quot;</span>&gt;</span> success <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-warning&quot;</span>&gt;</span> warning <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-danger&quot;</span>&gt;</span> danger <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can also alter the size:</p><div class="buttons">    <button class="button is-small"> small </button>    <button class="button"> normal </button>    <button class="button is-medium"> medium </button>    <button class="button is-large"> large </button></div><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-small&quot;</span>&gt;</span> small <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span> normal <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-medium&quot;</span>&gt;</span> medium <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-large&quot;</span>&gt;</span> large <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Or the style or state:</p><div class="buttons">    <button class="button is-primary is-outlined"> outlined </button>    <button class="button is-loading"> loading </button>    <button class="button" disabled> disabled </button></div><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-primary is-outlined&quot;</span>&gt;</span> outlined <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-loading&quot;</span>&gt;</span> loading <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">disabled</span>&gt;</span> disabled <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>As a result, it’s very easy to combine modifiers:</p><div class="buttons">    <button class="button is-primary is-small" disabled> Button </button>    <button class="button is-info is-loading"> Button </button>    <button class="button is-danger is-outlined is-large"> Button </button></div><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-primary is-small&quot;</span> <span class="attr">disabled</span>&gt;</span> Button <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-info is-loading&quot;</span>&gt;</span> Button <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-danger is-outlined is-large&quot;</span>&gt;</span> Button <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h2><h3 id="Clickable-Button"><a href="#Clickable-Button" class="headerlink" title="Clickable Button"></a>Clickable Button</h3><p>给按钮添加点击事件。点击下面的按钮获取问好👇</p><p><button class="button is-primary is-large" onclick="myFunction()"> Click me to greet </button></p><blockquote id="demo"> 👆点击获取问好 </blockquote><script>    function myFunction() {          document.getElementById("demo").innerHTML = "Hi there 👋";    }</script><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-primary is-large&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span> Click me to greet <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;Hi there 👋&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h3><p>A white box to contain other elements, such as sign in forms:</p><form class="box">  <div class="field">    <label class="label"> Email </label>    <div class="control">      <input class="input" type="email" placeholder="e.g. alex@example.com">    </div>  </div>  <div class="field">    <label class="label"> Password </label>    <div class="control">      <input class="input" type="password" placeholder="********">    </div>  </div>  <button class="button is-primary"> Sign in </button></form><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span> Email <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;e.g. alex@example.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span> Password <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;********&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-primary&quot;</span>&gt;</span> Sign in <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>or a name card:</p><div class="box">  <article class="media">    <div class="media-left">      <figure class="image is-64x64">        <img src="https://bulma.io/images/placeholders/128x128.png" alt="Image">      </figure>    </div>    <div class="media-content">      <div class="content">        <p>          <strong>John Smith</strong> <small>@johnsmith</small> <small>31m</small>          <br>          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas. Nullam condimentum luctus turpis.        </p>      </div>      <nav class="level is-mobile">        <div class="level-left">          <a class="level-item" aria-label="reply">            <span class="icon is-small">              <i class="fas fa-reply" aria-hidden="true"></i>            </span>          </a>          <a class="level-item" aria-label="retweet">            <span class="icon is-small">              <i class="fas fa-retweet" aria-hidden="true"></i>            </span>          </a>          <a class="level-item" aria-label="like">            <span class="icon is-small">              <i class="fas fa-heart" aria-hidden="true"></i>            </span>          </a>        </div>      </nav>    </div>  </article></div><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media-left&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">&quot;image is-64x64&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://bulma.io/images/placeholders/128x128.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;media-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>John Smith<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">small</span>&gt;</span>@johnsmith<span class="tag">&lt;/<span class="name">small</span>&gt;</span> <span class="tag">&lt;<span class="name">small</span>&gt;</span>31m<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla egestas. Nullam condimentum luctus turpis.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;level is-mobile&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;level-left&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;level-item&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;reply&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon is-small&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-reply&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;level-item&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;retweet&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon is-small&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-retweet&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;level-item&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;like&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon is-small&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-heart&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Ordered-lists-alternatives"><a href="#Ordered-lists-alternatives" class="headerlink" title="Ordered lists alternatives"></a>Ordered lists alternatives</h3><p><strong>Ordered lists</strong> <code>&lt;ol&gt;</code> support different <strong>types</strong> of items markers. To modify them, use either:</p><ul><li>the corresponding HTML attribute value</li><li>one of the following CSS modifier classes: <code>is-lower-alpha</code>, <code>is-lower-roman</code>, <code>is-upper-alpha</code> or <code>is-upper-roman</code></li></ul><div class="content">  <ol class="is-lower-alpha">    <li>Coffee</li>    <li>Tea</li>    <li>Milk</li>  </ol>  <ol class="is-lower-roman">    <li>Coffee</li>    <li>Tea</li>    <li>Milk</li>  </ol>  <ol class="is-upper-alpha">    <li>Coffee</li>    <li>Tea</li>    <li>Milk</li>  </ol>  <ol class="is-upper-roman">    <li>Coffee</li>    <li>Tea</li>    <li>Milk</li>  </ol></div><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;is-lower-alpha&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;is-lower-roman&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;is-upper-alpha&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;is-upper-roman&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="delete-button"><a href="#delete-button" class="headerlink" title="delete button"></a>delete button</h3><p>The <code>delete</code> element is a stand-alone element that can be used in different contexts.</p><p><button class="delete is-small"></button><br><button class="delete"></button><br><button class="delete is-medium"></button><br><button class="delete is-large"></button></p><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete is-small&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete is-medium&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete is-large&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Bulma uses it for the <a href="https://bulma.io/documentation/elements/tag/">tags</a>, the <a href="https://bulma.io/documentation/elements/notification/">notifications</a>, and the <a href="https://bulma.io/documentation/components/message/">messages</a>:</p><div class="block">  <span class="tag is-success">    Hello World    <button class="delete is-small"></button>  </span></div><div class="notification is-danger">  <button class="delete"></button>  Lorem ipsum dolor sit amet, consectetur adipiscing elit lorem ipsum dolor sit amet, consectetur adipiscing elit</div><article class="message is-info">  <div class="message-header">    Info    <button class="delete"></button>  </div>  <div class="message-body">    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque risus mi, tempus quis placerat ut, porta nec nulla. Vestibulum rhoncus ac ex sit amet fringilla. Nullam gravida purus diam, et dictum felis venenatis efficitur. Aenean ac eleifend lacus, in mollis lectus. Donec sodales, arcu et sollicitudin porttitor, tortor urna tempor ligula, id porttitor mi magna a neque. Donec dui urna, vehicula et sem eget, facilisis sodales sem.  </div></article><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag is-success&quot;</span>&gt;</span></span><br><span class="line">    Hello World</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete is-small&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;notification is-danger&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  Lorem ipsum dolor sit amet, consectetur adipiscing elit lorem ipsum dolor sit amet, consectetur adipiscing elit</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;message is-info&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-header&quot;</span>&gt;</span></span><br><span class="line">    Info</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;message-body&quot;</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque risus mi, tempus quis placerat ut, porta nec nulla. Vestibulum rhoncus ac ex sit amet fringilla. Nullam gravida purus diam, et dictum felis venenatis efficitur. Aenean ac eleifend lacus, in mollis lectus. Donec sodales, arcu et sollicitudin porttitor, tortor urna tempor ligula, id porttitor mi magna a neque. Donec dui urna, vehicula et sem eget, facilisis sodales sem.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Font-Awesome-container"><a href="#Font-Awesome-container" class="headerlink" title="Font Awesome container"></a>Font Awesome container</h3><span class="bulma-fa-mixin">  <i class="fas fa-thumbs-up"></i></span><figure class="highlight html"><figcaption><span>example.html >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bulma-fa-mixin&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-thumbs-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>这篇文章要做的内容有些多，未完待更 …</p>]]></content>
    
    
    <summary type="html">活用 Bulma ，让文章更丰富美观</summary>
    
    
    
    <category term="Tech" scheme="https://maizehsu.me/categories/Tech/"/>
    
    <category term="Tools" scheme="https://maizehsu.me/categories/Tech/Tools/"/>
    
    
    <category term="笔记" scheme="https://maizehsu.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Config" scheme="https://maizehsu.me/tags/Config/"/>
    
    <category term="Icarus" scheme="https://maizehsu.me/tags/Icarus/"/>
    
  </entry>
  
  <entry>
    <title>西部世界 | 探寻自由意志的技术悲观主义内核佳作</title>
    <link href="https://maizehsu.me/2022/09/19/12-westworld-s4-finale-review/"/>
    <id>https://maizehsu.me/2022/09/19/12-westworld-s4-finale-review/</id>
    <published>2022-09-18T21:45:10.000Z</published>
    <updated>2023-08-01T16:33:34.972Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 align="right">—— Westworld S04E08 个人解读</h3><p>西部世界第四季完结了，标志着又一代 HBO 神剧的没落。为什么说又？权力的游戏第八季那烂得震撼人心之感还在心头挥之不去呢。<del>2 DB 之后又去祸害星战系列，三体系列，能不能给我爬啊！！</del></p><p>诺兰夫妇在第三季放手托管，由编剧转成监制之后，WW 系列整体质量下滑不少。当然说 WW S4 烂到 GOT S8 那个程度，也是有些偏颇了。整体观感下来，虽然没做到一二季那样主题，剧情，角色三者兼顾，但能看出编剧尽力想通过套用前两季的一些成功元素，比如漂亮但空虚的循环故事，来拔高深度。可惜丢了剧情逻辑，把一些原本立体丰满的角色草草杀青了，不能说是不可惜。Nevertheless，季终集结合前两季编剧想表达的精神内核，能挖出来聊聊的点还是很多的。</p><p><strong>下面正文开始</strong> 👇</p><hr><h2 id="片头"><a href="#片头" class="headerlink" title="片头"></a>片头</h2><p>聊西部世界绕不开片头。我们来总结一下一到四季片头中的变量和不变量</p><blockquote><p>不变量</p></blockquote><h3 id="用于打印接待员身体的-3D-打印机"><a href="#用于打印接待员身体的-3D-打印机" class="headerlink" title="用于打印接待员身体的 3D 打印机"></a>用于打印接待员身体的 3D 打印机</h3><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/17/20220817-003513.png" width="80%" alt="三个圆圈的形状其实在致敬隔壁达斯米奇"><p><span class="image-caption"></span></p><p>每季片头都有这样的接待员身体打印机，强调 Host 由人类创造，和人类是 <strong>creator 和 creation</strong> 的关系。德妹常常挂在嘴边的一句话 <code>We are the reflections of the people who made us </code> 正是在说这件事情。尽管 Host 在生理和智力上比 Human 更加 superior ，他们在觉醒之后却依旧受到人类情感，欲望的制约。这段在 S4 中有很多不错的呼应，多体现在<strong>接待员受人类影响之后，对人类意志的继承上</strong>，之后在威廉的角色分析里展开聊。</p><h3 id="自动钢琴"><a href="#自动钢琴" class="headerlink" title="自动钢琴"></a>自动钢琴</h3><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/17/20220817-004342.png" width="80%" alt="希望未来也能有自动演奏的吉他"><p><span class="image-caption"></span></p><p>西部世界园区中的自动钢琴，是从第一季开始就频繁出现在 WW 系列中的意向。打孔的乐谱象征着人类为接待员撰写的 Storyline ，自动钢琴象征着 Host 本身，看似没有人操控他们，实际说的每一句话，每一个举动都 being programmed beforehead 。<strong>琴谱上的乐章由钢琴重复播放，象征着接待员们日复一日重复着自己的 Storyline。</strong></p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/17/20220817-162111.jpg" width="80%" alt="很像小时候玩的手摇音乐盒"><p><span class="image-caption"></span></p><p>上图出自 S01E02 在梅芙的酒吧。伴随着经典的甜水镇 theme song，上演 Maeve 和 Hector 两人的故事线，也就是他们的 loop。前奏轻快的钢琴和沙锤声是梅芙和克莱门汀在酒吧的打趣闲聊，之后弦乐的加入，预示着 Hector 和蛇女的到来，增添了几分危机感，最后再回归纯钢琴，淡出。曲子放这了👇，边听边读，俨然有身临其境之感。国内的话记得开港澳台之外的梯子节点。</p><iframe width="100%" height="166" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/297260359&color=%23121f24&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true"></iframe><div style="font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;"><a href="https://soundcloud.com/ramin-djawadi-official" title="Ramin Djawadi" target="_blank" style="color: #cccccc; text-decoration: none;">Ramin Djawadi</a> · <a href="https://soundcloud.com/ramin-djawadi-official/sweetwater" title="Sweetwater" target="_blank" style="color: #cccccc; text-decoration: none;">Sweetwater</a></div><p>片头的钢琴起初由一双接待员的手弹奏，再次切回这段时，接待员的双手放开，钢琴声自动响起，象征着自我意识的觉醒，自己谱写自己生命的乐章。弹得当然就是片头曲 <code>Westworld Theme Song</code>，你永远可以相信 Ramin Djawadi 的作曲以及编曲水平。</p><blockquote><p>变量</p></blockquote><h3 id="动物"><a href="#动物" class="headerlink" title="动物"></a>动物</h3><p>第一季：Host 骑着 🐎；第二季：野牛 🐂，第三季：鹰 🦅；第四季：苍蝇。</p><p>想不通第四季放个苍蝇的意向是什么。大概想强调<strong>控制</strong>吧，毕竟第四季一大重要设定是接待员利用苍蝇作为病毒载体感染并控制人类。但 WW 系列的主题从来都不是控制本身，而是打破控制，寻找自由意志。从这个角度看，前三季的动物是符合 spirit 的，第四季选的苍蝇个人并不满意。</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>每一季的片头曲中会放一些和本季重要剧情相对应的场景。本季的关键词是<strong>笼子，焚烧，Delos 永生实验舱和苍蝇眼睛</strong>。一个个不同的个体（大概是人类吧）被困在自己圆柱形牢笼内，试图打破逃出而不得，最终被焚烧其中。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/17/20220817-173248.jpg" width="80%" alt="密恐犯了"><p><span class="image-caption"></span></p><p>这个过程跟 S2 中 Delos 的永生实验很像，同样圆柱形的实验舱，实验体被困其中，而实验失败后实验体便会被牢笼中的火焰吞噬。而是否通过永生实验的条件是<code>Fidelity</code> ，即能否改变，打破循环，做出与之前 version 的自己不一样决定。剧中对人类自由意志是悲观的。正如威廉的女儿在 S2 季终彩蛋对威廉说的 <code>Every choice of yours leads to this situation.</code>，WW 认为<strong>人类很难做出改变，（人类)无论被赋予多少次机会，依旧难以做出改变，找到自由意志。</strong></p><p>有意思的是，最后展示的 big picture ，许多个实验舱合在一起，组成了很像是苍蝇复眼的场景，算是一个对照吧。</p><h2 id="Que-Sera-Sera"><a href="#Que-Sera-Sera" class="headerlink" title="Que Sera Sera"></a>Que Sera Sera</h2><p>S04E08 的标题 <code>Que Sera Sera</code> ，英文是 <code>Whatever will be, will be</code> ，中文 <code>顺其自热</code>，原曲是阿尔弗雷德 · 希区柯克的电影《擒凶记》中的女主角 Dorris Day <a href="https://www.bilibili.com/video/BV1qK411M7f7">钢琴弹唱</a>。在剧中父女俩一起哼唱了这首歌，</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/17/20220817-093505.jpg" width="80%" alt="请允许我夸一下小粉的演技"><p><span class="image-caption"></span></p><p>不过我个人第一次听这首歌是年初在惊悚美剧 <code>From 梦魇绝阵</code> ，于是当 Caleb 父女哼唱这首歌的时候，属实有些跳戏。<code>From</code> 的片头附在这了，氛围营造的不错。<del>希望大家看完后去补西部世界都能体会到我当时的毛骨悚然感。</del>: )</p><div class="video-container"><iframe src="https://www.youtube.com/embed/man4IvqHIxE" frameborder="0" loading="lazy" allowfullscreen></iframe></div><br/><p>这并不是第一次西部世界用到经典音乐作品，S02E08 把 Nirvanna 的 <code>Heart Shaped Box</code> 改编成了钢琴抒情版，至今还记得当时认出主旋律时内心的震撼。S03E04 的逛窑子神曲，爵士版 <code>Wicked Game</code> by the Weekend，本季开头古典弦乐版 <code>Video Games</code> by Lana Del Rey … ，不胜枚举。之后有空余时间会单独开一篇聊聊西部世界中的音乐，届时再结合场景细说。</p><h2 id="德洛丽丝和泰迪：可望不可及的神仙爱情"><a href="#德洛丽丝和泰迪：可望不可及的神仙爱情" class="headerlink" title="德洛丽丝和泰迪：可望不可及的神仙爱情"></a>德洛丽丝和泰迪：可望不可及的神仙爱情</h2><p>德妹是西部世界当之无愧的大女主。若用一句话概括她的 character image ，那便是 <code>I choose to see the beauty</code> 。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-161636.jpg" width="80%" alt="德妹的 motto"><p><span class="image-caption"></span></p><p>第一季第二季的德妹是两面性的。光明面的德妹一直能看到世界的 beauty，黑暗面的德妹代号 Wyat，内心更多由之前受到的压迫和仇恨驱动，带来的是两个族群的毁灭。不过好在德妹有阳光大男孩泰迪，正如<del>每位成功的女人背后都离不开善良朴实默默支持她的男人</del>。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-170659.jpg" width="80%" alt="神仙爱情"><p><span class="image-caption"></span></p><p>泰迪离开了德妹，便有了德妹第二季屠杀其他接待员时的 gone too far，因而最后泰迪以死明志，最终把德妹从仇恨的边缘拉回。德妹需要泰迪来 pull her back，需要泰迪唤醒自己心中的美好与善。这种关系像是黑袍纠察队中的 Butcher 和弟弟，或是星战中的安纳金和帕德梅，GOT 中的丹妮莉丝和小恶魔。能够成为唯一 hold you back 的人一定是至亲至爱，毕生能有如此之人，便是大幸。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-171254.jpg" width="80%" alt="Every detail of you I cherish"><p><span class="image-caption"></span></p><p>德妹和泰迪互为 cornerstone，真的磕死。当两个人的爱情发展到只有和对方在一起才能 be the best of their selves ，彼此以对方为核心驱动力，那是人间理想了。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-171452.png" width="80%" alt="一吻等四年"><p><span class="image-caption"></span></p><p>德妹的故事还有一个关键词：<strong>找寻</strong>。德妹用整个第一季觉醒，找寻自己存在的意义。第二季失去了父亲，泰迪，战友，差点走向黑暗，但最终把路走通，真正长大。第三季按照 grand plan 牺牲自己解放全人类。第四季看到又回归单纯的德妹，真的有种看女儿长大的感觉。单纯的德妹很能让人 relate to 。毕竟，**we are all little girls searching for meanings of life **。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-171815.jpg" width="80%" alt="年度最佳鸡汤"><p><span class="image-caption"></span></p><h2 id="夏洛丽丝：异体同心"><a href="#夏洛丽丝：异体同心" class="headerlink" title="夏洛丽丝：异体同心"></a>夏洛丽丝：异体同心</h2><p>夏洛丽丝是第三季德妹的分身，剧组借鉴了来源佛教的一个概念 <a href="https://nstmyoshinji.org/terminology/itai-doshin/">Itai doshin</a> ，即 <code>Many in Body, One in Mind</code> 。第三季把这个概念玩的飞起，当时 S3E04 <code>Mother of Exile</code> plot reveal 的时候引发了一波社交媒体热潮。而每个德妹的分身也受自己人类躯壳性格的影响，遂有了夏洛丽丝承受不了德妹的弃子安排，堕入黑暗。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-165322.jpg" width="80%" alt="夏洛丽丝：一己之力玩坏世界"><p><span class="image-caption"></span></p><p>夏洛丽丝也是德妹没有泰迪 Hold Back ，因仇恨失去理智走向极端的一面。不过很令人遗憾的是，第四季只字未提第三季遗留的四个德妹分身，等了一整季上季德妹分身的下落，最后大结局草草收尾。大概是剧组打的安全牌吧，毕竟还不知道能不能有第五季，不敢玩太大。</p><p>另一个角度看夏洛特和她手中的 Host，则是接待员难以跳脱出人性 flaw 的代表。夏洛丽丝以控制，报复人类为乐，她手下的 host 同样对猎杀人类乐此不疲。那么这样一来接待员和两季前的人类没什么两样了，有种<strong>屠龙少年终成恶龙的感觉。</strong> 接待员想要成为比人类更加 civlized，advanced being，必须学会放弃人类的欲望。</p><h2 id="威廉：人性的纯粹之恶"><a href="#威廉：人性的纯粹之恶" class="headerlink" title="威廉：人性的纯粹之恶"></a>威廉：人性的纯粹之恶</h2><p>William 是 WW 系列中人物塑造最丰满的人类角色。威廉开局没钱没身份，靠读书认识了未来的妻子，在国内我们叫这样的人<code>小镇做题家</code>。但和国内不同的是，威廉居然奋斗出头了，娶了大富豪 Delos 家的闺女，获得一次和大舅子去乐园度假的机会。初到乐园的他是个傻白甜，连看门妹子都不敢占便宜，但和德妹相处的经历改变了他。看透”本质“的威廉设计害了小舅子，用一个复杂计划证明了自己，既挽救了当时濒临破产的西部世界园区，又 impress 了迪洛斯家的老爷子，取代小舅子继承了公司和亿万家产，<del>又一个爽文男主</del>。</p><p>那么究竟是什么改变了老好人威廉呢？在第一季和第二季中分别有两个 character defining moment。S1 季初的威廉对德妹一见钟情，百般爱护，在经历千般冒险之后和德妹走散，再见时德妹已经被重置，先前培养的种种共同记忆清零。S2 季中威廉成为黑衣人之后，遇到了因母亲自杀去世想来找自己问清楚的女儿。威廉本不想把女儿卷进自己的世界，但在恍惚中把女儿认作是乐园里的接待员，情急之下误杀。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-004119.png" width="80%" alt="威廉：五十年前妹子对我说的话我还记得"><p><span class="image-caption"></span></p><p>所以 S04E07 中把威廉选为大 Boss ，让他来担任两个种族共同的敌人，这个选择我是满意的。<strong>威廉是虚无主义的代表，和德妹的经历告诉他 nothing lasts forever ，亲手杀死女儿又让他失去了对尘世最后的留恋。威廉是人性中的 pure evil 的代表，正是这样毫无牵挂，只有血腥和杀戮能给他的情绪带来一些波动的人，才能担当灭绝人类和接待员两族之大任。</strong></p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-151219.png" width="80%" alt="Delos 永生计划没有成功过"><p><span class="image-caption"></span></p><p>前面说到接待员对于人类意志的继承，S4 中接待员威廉心里是夏洛丽丝的 copy，但最终却继承了威廉的的 spirit。剧中解释是用了谁的 body，便不可避免受这个 body 主人性格的影响，自然无可厚非。我以为可以和第二季 Delos 的永生计划联系起来思考。把人类的心智装在 Host 身体永远无法兼容，同样把 Host 心智装在人类身体也会逐渐被身体原来的主人 take over，无法活出自己。<strong>大抵是想表达人类和接待员终究是两个物种，人类想通过接待员身体实现永生，或是接待员想通过假扮人类统治世界，在宏观尺度上都是 cross boundary 的行为。各走各的路，才能各自安好。</strong></p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-003722.png" width="80%" alt="想不到吧，我也是德妹"><p><span class="image-caption"></span></p><p>不过这个理论有个 exception，便是 WW 世界中和福特比肩的重量级人物 Bernard，我们下一节说。</p><h2 id="伯纳德：The-key-to-everything"><a href="#伯纳德：The-key-to-everything" class="headerlink" title="伯纳德：The key to everything"></a>伯纳德：The key to everything</h2><p>伯纳德的起源故事很有意思。他是西部世界联合创始人 Arnold 的接待员版本，但不同于其他失败的人类接待员是通过采集 Behavioral Data 来还原心智，Bernard 是通过德妹的记忆一言一举还原的。为什么德妹的记忆这么靠谱呢？因为 Arnold 在儿子去世之后全身心的投入一代接待员的开发之中，而德妹作为初代机，和当时的 Arnold 朝夕相处。<strong>所以 Bernard 的心智球是红黑相间的，红色代表人类，黑色代表接待员。伯纳德是人类和接待员共存的现身代表。</strong></p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-143758.jpg" width="80%" alt="说话的是德妹"><p><span class="image-caption"></span></p><p>伯纳德和德妹是决定两个族群未来的两个重要角色。伯纳德的代号是 <code>The Passenger</code> （S2E10 标题），德妹则是 <code>The Storyteller</code> （S4E7 德妹用户名）。伯纳德哪都去过，是联系 host、human、sublime 的桥梁，因此是 passenger。而德妹第二季读取了乐园里所有游客的 data，第四季又读取了全世界人类的 data。两个族群的过去，现在和未来都在德妹脑子里，因此是 story teller 。</p><p>我原以为 Bernard 会是编剧深挖的重点的，没想到最后给伯纳德分配的作用居然就是录个视频放把枪。<strong>这是我觉得第四季最令人失望的地方了，不仅逻辑接不上，还搭进去了一个前两季塑造如此成功的角色。</strong></p><p>先知谁都能当，把泰迪从虚拟世界拉出来也能做这个工作。而<strong>伯纳德和其他任何人类或接待员不一样的地方正是在他身为 Host，core drive 却是 for the good of human kind 。他为 Delos 永生计划提供了 alternative 思路。从他的身上才能看见两个种族和平相处的希望，he is the key to everything 。</strong> 可惜第三第四季的编剧 is not even close from seeing 这些之前铺垫好的角色价值。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-143711.jpg" width="80%" alt="第二季季终就预示了两人结局"><p><span class="image-caption"></span></p><h2 id="梅芙：The-most-human-host"><a href="#梅芙：The-most-human-host" class="headerlink" title="梅芙：The most human host"></a>梅芙：The most human host</h2><p>如果说德妹和伯纳德（还有前两季的 Akecheta）在 WW 中的角色定位是 savior，是亦或掀竿革命，亦或普渡众生的大家角色，梅芙的角色定位则一直是小家。所以一直以来我们最能和梅芙产生共情，因为她的 character core drive 是亲情，是对女儿的爱。梅芙的另一大特点是有情有义，很像是东方文化里的侠客。第二季特地给她安排了一个日本文化版的 counterpart，也是对她这样形象的 reinforcement。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-135818.jpg" width="80%" alt="梅芙和梅芙"><p><span class="image-caption"></span></p><p>第一季季末，当梅芙杀出重围，有了逃出 WW，去往人类世界的机会时，发现这一切依旧是 Ford 在背后给她设定好的故事线，甚至包括她对女儿的牵挂。然而历经千难万险，在自己有了选择，freedom and love 之前，她毅然选择了 love。第四季，一句答应为小粉照顾女儿，便是跨越三十年的承诺，以命相许。</p><p><strong>In the end，很多 post-apocalyptic 作品给出 the solution to saving humanity 很简单，all we need is love。</strong></p><div class="video-container"><iframe src="https://www.youtube.com/embed/_7xMfIp-irg" frameborder="0" loading="lazy" allowfullscreen></iframe></div><br/><p>夹个私货👆。有着对家庭的执念，说到做到，有情有义的侠客 Maeve ，怎能让人不爱。</p><h2 id="小粉和女儿：星际穿越般的父女情"><a href="#小粉和女儿：星际穿越般的父女情" class="headerlink" title="小粉和女儿：星际穿越般的父女情"></a>小粉和女儿：星际穿越般的父女情</h2><p>聊小粉和女儿之前，得先搞清楚他们的角色定位，毕竟是第三第四季引入的新角色。小粉和威廉是到第三季主角团唯二幸存的人类。小粉和威廉完全相反，他是 Outliers 的代表，代表对宿命论的反抗和人性中的善（参见他在第三季军营中的回忆线）。而第四季引入小粉和女儿则是人类这边纯朴亲情的代表。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-131547.png" width="80%" alt="小粉版 Love you 279 times"><p><span class="image-caption"></span></p><p>西部世界主角团真实人均宝贝女儿哈，夏洛丽丝和女儿，梅芙和女儿，威廉和女儿，小粉和女儿，伯纳德和 … <del>终于是儿子了</del>。主角团下一代的遭遇往往都是主角们的 character defining moment。前面说了小粉和威廉是人类希望和毁灭的代表，这里还有一个有趣的 compare and comparison。Frankie 和接待员版本的小粉见面对应威廉和（他以为是接待员实际是人类的）女儿见面。<strong>同样是几十年杀戮，以及和 Host 势不两立的恨，Frankie 选择接纳父亲，给接待员版本的父亲一个救赎自己，完成几十年前原版小粉的未竟之志的机会。</strong>而威廉则沉浸于杀戮带来的嗜血快感，亲情已经无法救赎他。<strong>所以你看，WW 系列固然对人类悲观，但也偷偷藏了不少希望。</strong></p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-133515.jpg" width="80%" alt="小粉的坦白，这段看泪目了"><p><span class="image-caption"></span></p><p>因此，小粉和女儿的角色设定把 WW 系列从对人类完全悲观的极端往回拉了一些。在充满血腥暴力的剧中，有这样的温情，我认为是很有必要的。另外这季 Frankie 的演员演的也特别棒，父女重逢这场戏两人互飙演技，爱了爱 了。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-133847.jpg" width="80%" alt="每位父母最大的心愿"><p><span class="image-caption"></span></p><h2 id="锤哥：永远的陪跑"><a href="#锤哥：永远的陪跑" class="headerlink" title="锤哥：永远的陪跑"></a>锤哥：永远的陪跑</h2><p>锤大哥也是一个很有趣的角色，一开始以人类身份出场，第二季最后揭示他一直以来都是福特安插的间谍。不过和其他 Host 不一样的是，他作为同样没有觉醒（至少在第二季末）的 Host， 一开始就知道自己是接待员，也知道自己的 core drive 是 for the good of his own kind。本身他的觉醒是一个值得挖掘的点，可惜直到第四季他都还只是一个工具人。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/16/20220816-205300.png" width="80%" alt="锤大哥为数不多的高光时刻"><p><span class="image-caption"></span></p><p>四季以来一直是人是 Host 都在秀，只有锤哥在挨揍。这张高光后的20s，陪伴咱们四季的锤大哥也草率下线了。编剧真的无脑发盒饭。<del>无能狂怒。</del></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>纵观 WW 系列四季，</p><p><strong>第一季讲接待员意识的觉醒。接待员也可以有自我意识。</strong>这首先否定了人类作为唯一有思想的高等物种的独一无二性。消解了人之为人的独一无二性后，作为 creation 代表德妹一枪崩了作为 creator 代表福特，是对 technology 高速发展丧失敬畏，盲目乐观的人们的一记重击。</p><p><strong>第二季讲的是高等物种（Both human and host）在面临 survival 下的不同选择和分化。</strong>在生存的危机下，接待员分成两派。平和一派走向了 sublime，去往虚拟世界的极乐天堂，激进一派则是去往人类世界，就此开始人类和接待员共存的时代。人类一派如威廉向虚无主义的道路走远，夏洛特则是对 technology 失去敬畏的代表。他们都在第二季的生存竞赛中输得很彻底。</p><p><strong>第三季讲宿命和对既定宿命的反抗。</strong>即使所有人都按照人工智能规划好的路线生活，社会依旧做不到长久安稳。这个概念来自于上世纪一本书 <a href="https://www.goodreads.com/book/show/122382.Entropy">Entropy: A New World View</a>，书的宗旨贴下面了👇，完美解释了第三季</p><blockquote><p>The authors seek to analyse the world’s economic and social structures by using the second law of thermodynamics, that is, the law of entropy. The authors argue that humanity is wasting resources at an increasing rate, and that will lead to the destruction of our civilization, which has happened before on a smaller scale for past empires.</p></blockquote><p><strong>一句话版：有限的地球资源 + 快速发展 &#x3D; 熵增，即混乱程度的上升，there’s nothing you can do to change that。</strong></p><p><strong>第四季讲</strong>走向极端的接待员和之前的人类半斤八两，依旧以猎杀人类为乐。<strong>人性中生来的恶是原罪，对于控制和权力的渴求 is non-stopping，这便是技术悲观主义的一种解读：我们的 creation 身上带有我们的 flaw，他们也无法 save humanity from extinction</strong>。所以第四季结尾把一半的希望寄托给了少数的 outliers，<strong>能够拯救人类的还得是人类文明自己。</strong></p><p>所以科幻片的内核永远是人文，没有任何科幻片是以技术硬核，特效标榜成为佳作的。剧中的接待员和人早已没啥两样了。西部世界 has little to do with AI，but has everything to do with 人、社会、亲情、爱。我非常喜欢 George R R Martin 在一次采访中引用的一句话</p><blockquote><p>The only thing worth writing about is the human heart in conflict with itself.</p></blockquote><p>而 WW S1、S2 正是抓住了这一点，成功地塑造了一批立体，有血有肉的人物，讲了两段环环相扣，惊心动魄的故事（福特死前和死后）。There is still so much to talk about 。这里挖个坑，待三刷 S1、S2 之时把德妹，威廉，以及其他 Character Arc 丰满的人物成长路线单独拿出来聊聊。希望哪怕不喜欢科幻标签的朋友们也能吃上安利，补上这部剧，大家一起畅聊自己的解读。</p><img src="https://raw.githubusercontent.com/Maizehsu/FigureBed/main/asset/2022/08/18/20220818-003423.png" width="80%" alt="最后放一张泰迪美照镇楼"><p><span class="image-caption"></span></p><p>编剧给第五季挖了个大坑，认为拯救一切的 key 在于德妹和德妹脑子里全人类的数据，需要跑 some kind of test 来拯救两个种族的未来。<del>我看就是为了下一季软重启回到西部世界吃老本讨好粉丝。</del> 是个很新颖的角度，值得展望一下，不过本文篇幅原因，先不展开了。我还是一直坚持 Bernard 才是 the key to everything，不过看 s04e07 分给 Bernard 的时长，应该是领盒饭了，实在令人叹息。</p><p>截至目前，HBO 还没宣布续订，看样子有凉在第四季的趋势。不过 a part of me 还是希望无论多烂，编剧也把这段传奇故事收个尾，起码对得起当年诺兰夫妇开的好头，对得起我们这些剧迷花这么多时间琢磨剧情，隐喻，补背景知识，看德妹成长。WW 五季续订时，定勿忘回评论区👇烧香。</p>]]></content>
    
    
    <summary type="html">这场残暴的欢愉，终将以残暴终结</summary>
    
    
    
    <category term="Reviews" scheme="https://maizehsu.me/categories/Reviews/"/>
    
    <category term="Sci-fi" scheme="https://maizehsu.me/categories/Reviews/Sci-fi/"/>
    
    
    <category term="随想" scheme="https://maizehsu.me/tags/%E9%9A%8F%E6%83%B3/"/>
    
    <category term="影评" scheme="https://maizehsu.me/tags/%E5%BD%B1%E8%AF%84/"/>
    
    <category term="科幻" scheme="https://maizehsu.me/tags/%E7%A7%91%E5%B9%BB/"/>
    
  </entry>
  
  <entry>
    <title>随记 | 于 2020.12 考完托福后</title>
    <link href="https://maizehsu.me/2022/08/16/5-simple-tips-for-toefl/"/>
    <id>https://maizehsu.me/2022/08/16/5-simple-tips-for-toefl/</id>
    <published>2022-08-15T20:00:00.000Z</published>
    <updated>2022-08-15T20:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="浅聊"><a href="#浅聊" class="headerlink" title="浅聊"></a>浅聊</h4><p>客观评价来说，托福难度不高。考前刷过少许题目之后身边的小伙伴们都能做到阅读听力接近满分。那么，决定高分的部分是写作和口语。然而，写作和口语多是机器阅卷，所以掌握适当技巧，结合自己本身还不错的英语底子，高分便不难拿。不过，私以为在申请过程中，只要不申请“贵族学校”，如部分藤校，文理学院等，一般的学校，tech 类尤甚，对于语言考试的要求仅仅是过线而已。所以，有空余时间的话大可多做些自己喜欢的事情，卷卷绩点，跟朋友 hang out。这里给一个简单的参考线，103 + 合格，105 + 很棒，108 + 超群，110 + 浪费。</p><p>下面简单聊聊每个部分的考试形式和应试技巧。</p><h4 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h4><h6 id="前三个task"><a href="#前三个task" class="headerlink" title="前三个task"></a>前三个task</h6><p>15s &#x2F; 20s 准备，45s &#x2F; 1min 说，为准备<strong>时间很短</strong>，所以在记笔记的时候只写要说的几个 reason 中 <strong>key points</strong></p><p>模板：</p><p>*Yes &#x2F; no, I do &#x2F; don’t believe that … &#x2F;&#x2F; My preference for … is that …*（重复题干，语速<strong>慢一些</strong>，声音<strong>大一些，语调自信</strong>很重要）</p><p><em>and my reasons are listed as follows.</em></p><ul><li><p><em>The first reason is that … In addition, … Finally I want to emphasize that …</em> <em>Consequently</em> … 重复题目，有时间讲没时间拉倒。</p></li><li><p><em>For one thing, … For another … Also it should be noted that …</em> ( In conclusion … )</p></li></ul><p>如何避免卡壳：忌说 eh &#x2F; ah &#x2F; wu &#x2F; en，用 <strong>yeah, well, like, you know, say</strong>, 补充自己观点用 <strong>which inferred&#x2F; indicates (the idea that), namely…, In fact what I want to emphasize is…</strong> 。</p><h6 id="最后一个task"><a href="#最后一个task" class="headerlink" title="最后一个task"></a>最后一个task</h6><p>概括 lecture &#x2F; class，注意下多记点笔记，到时候对着笔记读就好。</p><p>模板：</p><p><em>The lecturer &#x2F; author came up with the idea that … \ concept of … He &#x2F; she first mentioned the significance &#x2F; phenomenon ( from which he &#x2F; she concluded … ) … Later he &#x2F; she claimed that … In addition &#x2F; However, … he &#x2F; she added &#x2F; raised a question ( 质疑 ) In conclusion, all of the above contributes to the lecturer &#x2F; author’s idea of …</em></p><p>For quotation: <em>The lecturer &#x2F; author mentioned in his lecture &#x2F; text that … &#x2F;&#x2F; He &#x2F; she made a very good point such that …</em></p><p>注：这个模板也可以用于 <strong>integrated writing</strong>。</p><h4 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h4><p><strong>背单词</strong>，多读长难句保证文章看懂没压力。</p><p>考试别睡着。</p><h4 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h4><p>多刷题，大概有idea都会问些啥问题。</p><p>练速记笔记，记关键词和句子之间<strong>逻辑关系</strong>，用只要自己能看得懂的符号，<strong>中英结合</strong>。</p><h4 id="作文"><a href="#作文" class="headerlink" title="作文"></a>作文</h4><h6 id="Integrated-Writing"><a href="#Integrated-Writing" class="headerlink" title="Integrated Writing"></a>Integrated Writing</h6><p>见口语最后一个task。</p><h6 id="大作文"><a href="#大作文" class="headerlink" title="大作文"></a>大作文</h6><p>30 min，300+字，<strong>能多写尽量多写</strong>。</p><p>构思五分钟，记一下三个以上reason的key words ( 想不到点可以<strong>辩证</strong> )，马上开始码字。</p><p>千万<strong>不能有语法句法错误</strong>，不确定拼写的词换掉。</p>]]></content>
    
    
    <summary type="html">记于大一春季考完托福后</summary>
    
    
    
    <category term="Dailies" scheme="https://maizehsu.me/categories/Dailies/"/>
    
    <category term="English" scheme="https://maizehsu.me/categories/Dailies/English/"/>
    
    
    <category term="补档" scheme="https://maizehsu.me/tags/%E8%A1%A5%E6%A1%A3/"/>
    
    <category term="托福" scheme="https://maizehsu.me/tags/%E6%89%98%E7%A6%8F/"/>
    
    <category term="申请" scheme="https://maizehsu.me/tags/%E7%94%B3%E8%AF%B7/"/>
    
    <category term="语言" scheme="https://maizehsu.me/tags/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Icarus (1) | The Road To Personalization</title>
    <link href="https://maizehsu.me/2022/08/16/4-icarus-theme-configuration-1/"/>
    <id>https://maizehsu.me/2022/08/16/4-icarus-theme-configuration-1/</id>
    <published>2022-08-15T19:00:00.000Z</published>
    <updated>2022-08-15T19:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h4><ul><li><a href="https://git-scm.com/">Git</a></li><li><a href="https://pages.github.com/">Github Pages</a></li><li><a href="https://nodejs.org/en/download/">node.js</a></li></ul><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line"></span><br><span class="line">// 验证是否安装成功</span><br><span class="line">hexo -v</span><br><span class="line"></span><br><span class="line">// 初始化文件夹</span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">// 生成静态文件</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">// 打开本地服务器预览: localhost:4000/</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h4><p>修改 <code>_config.yml</code> 配置文件最后一段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Maizehsu/Maizehsu.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>安装插件 <code>npm i hexo-deployer-git</code> ，此时 <code>\source\_posts</code> 目录下放置 <code>.md</code> 文档。</p><p>三板斧更新 Blog</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 生成静态文件</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">// 本地预览效果</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">// 部署到 github</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><h6 id="Logo"><a href="#Logo" class="headerlink" title="Logo"></a>Logo</h6><p>左上角和左下角导航栏图标修改在 <code>_config.icarus.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Path or URL to the website&#x27;s logo</span><br><span class="line">logo:</span><br><span class="line">    text: Maize&#x27;s Blog</span><br></pre></td></tr></table></figure><h6 id="Favicon-amp-Title"><a href="#Favicon-amp-Title" class="headerlink" title="Favicon &amp; Title"></a>Favicon &amp; Title</h6><p>favicon 修改在 <code>_config.icarus.yml</code> ，这里用了 <a href="https://favicon.io/favicon-generator/">favicon generator from text</a> ，字体用的是 <a href="https://fonts.google.com/specimen/Acme">Acme</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Page metadata configurations</span><br><span class="line">head:</span><br><span class="line">    # URL or path to the website&#x27;s icon</span><br><span class="line">    favicon: /img/favicon.ico</span><br></pre></td></tr></table></figure><p>首页 title 修改在 <code>_config.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title: Maize&#x27;s Blog</span><br></pre></td></tr></table></figure><p>同样地方顺便也可以修改一下 author</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author: Maize_hsu</span><br></pre></td></tr></table></figure><p>首页三栏，阅读页两栏，把 Recents 和 Archives 放在右边栏，在阅读模式下放回左边。新建一个 <code>_config.post.yml</code> 覆盖之前的配置</p><h4 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h4><p>首先用 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 插件生成 <code>RSS</code> 源，再通过 follow.it 托管服务，具体教程请参照<a href="http://ppoffice.github.io/hexo-theme-icarus/Widgets/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E6%8C%82%E4%BB%B6/#follow-it">这里</a></p><h4 id="Navbar"><a href="#Navbar" class="headerlink" title="Navbar"></a>Navbar</h4><p>暂时没改，未来需要增加更多顶部栏时候再配置。导航栏右侧 icon 对应的 github 链接改成了个人网站的 repo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Links to be shown on the right of the navigation bar</span><br><span class="line">links:</span><br><span class="line">    Download on GitHub:</span><br><span class="line">        icon: fab fa-github</span><br><span class="line">        url: https://github.com/Maizehsu/Maizehsu.github.io</span><br></pre></td></tr></table></figure><h4 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h4><p>右下角 copyright 部分暂时没打算动</p><h4 id="Article-amp-search"><a href="#Article-amp-search" class="headerlink" title="Article &amp; search"></a>Article &amp; search</h4><p>代码高亮和搜索暂时没打算动</p><h4 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h4><p>Widget 是 Icarus 主题精髓部分，下面是具体配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">position: left</span><br><span class="line">type: profile</span><br><span class="line"># Author name</span><br><span class="line">author: Maize_hsu</span><br><span class="line"># Author title</span><br><span class="line">author_title: Undergrad of cs @umich &amp;&amp; ece @sjtu</span><br><span class="line"># Author&#x27;s current location</span><br><span class="line">location: Ann Arbor, MI</span><br><span class="line"># URL or path to the avatar image</span><br><span class="line">avatar: img/avatar.jpg</span><br><span class="line"># Whether show the rounded avatar image</span><br><span class="line">avatar_rounded: true</span><br><span class="line"># Email address for the Gravatar</span><br><span class="line">gravatar:</span><br><span class="line"># URL or path for the follow button</span><br><span class="line">follow_link: https://github.com/Maizehsu</span><br><span class="line"># Links to be shown on the bottom of the profile widget</span><br><span class="line">social_links:</span><br><span class="line">    Email:</span><br><span class="line">        icon: fas fa-envelope</span><br><span class="line">        url: mailto:maizehsu02@gmail.com</span><br><span class="line">    Github:</span><br><span class="line">        icon: fab fa-github</span><br><span class="line">        url: https://github.com/Maizehsu</span><br><span class="line">    # Twitter:</span><br><span class="line">    #     icon: fab fa-twitter</span><br><span class="line">    #     url: https://twitter.com</span><br><span class="line">    Linkedin:</span><br><span class="line">        icon: fab fa-linkedin</span><br><span class="line">        url: https://www.linkedin.com</span><br><span class="line">    CV: download/cv_mai_xu.pdf</span><br><span class="line">    douban: https://www.douban.com/people/199359961/</span><br><span class="line">    # Zhihu:</span><br><span class="line">    #     icon: fab fa-zhihu</span><br><span class="line">    #     url: https://www.zhihu.com/people/maize-hsu</span><br></pre></td></tr></table></figure><p>其中图标可以选择使用 <a href="https://fontawesome.com/start">font-awesome 库</a> ，也可以用文字形式，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;链接名称&gt;: &lt;链接的URL地址&gt;</span><br></pre></td></tr></table></figure><p>删掉了友链和推广板块</p><h4 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h4><p>评论系统用了 <code>gitalk</code> ，网上教程很多就不多赘述了，配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">    type: gitalk</span><br><span class="line">    client_id: xxxx</span><br><span class="line">    client_secret: xxxx</span><br><span class="line">    repo: gitalk</span><br><span class="line">    owner: Maizehsu</span><br><span class="line">    admin: Maizehsu</span><br></pre></td></tr></table></figure><h4 id="统计数据"><a href="#统计数据" class="headerlink" title="统计数据"></a>统计数据</h4><p>Google Analytics，网上教程很多，这里也不赘述了</p><h4 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h4><p>在 markdown 环境下渲染数学公式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure><h4 id="https-加密"><a href="#https-加密" class="headerlink" title="https 加密"></a>https 加密</h4><p>参考了这两个链接配置自定义域名和 Github Page 之间的联系：</p><ul><li><a href="https://github.com/orgs/community/discussions/22052">https://github.com/orgs/community/discussions/22052</a></li><li><a href="https://stackoverflow.com/questions/54059217/how-to-fix-domain-does-not-resolve-to-the-github-pages-server-error-in-github">https://stackoverflow.com/questions/54059217/how-to-fix-domain-does-not-resolve-to-the-github-pages-server-error-in-github</a></li></ul><p>对于我用的 <a href="https://www.namecheap.com/support/knowledgebase/article.aspx/9645/2208/how-do-i-link-my-domain-to-github-pages/">namecheap.com</a> 来说，</p><blockquote><p>Here you will need to create several records for your domain:</p><ul><li>A record for <strong>@</strong> pointing to <em>185.199.108.153</em></li><li>A record for <strong>@</strong> pointing to <em>185.199.109.153</em></li><li>A record for <strong>@</strong> pointing to <em>185.199.110.153</em></li><li>A record for <strong>@</strong> pointing to <em>185.199.111.153</em></li><li>CNAME record for <strong>www</strong> pointing to your <em><a href="http://username.github.io/">username.github.io</a></em> (the username should be replaced with your actual GitHub account username):</li></ul></blockquote><p>配置完记得</p><blockquote><p>Just make sure you wait for the DNS Propagation to take effect which in some cases might take up to 24hrs.</p><p>WAIT A DAY, ENJOY OUTDOOR WALK.</p></blockquote><p>真的很喜欢 stack overflow 上的一些幽默。</p>]]></content>
    
    
    <summary type="html">这个系列记录配置 Icarus 主题的过程。之后打算写一个详细的 changelog，故本文姑且当作是折腾过程中的随记了。</summary>
    
    
    
    <category term="Tech" scheme="https://maizehsu.me/categories/Tech/"/>
    
    <category term="Tools" scheme="https://maizehsu.me/categories/Tech/Tools/"/>
    
    
    <category term="笔记" scheme="https://maizehsu.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Config" scheme="https://maizehsu.me/tags/Config/"/>
    
    <category term="Icarus" scheme="https://maizehsu.me/tags/Icarus/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 刷题笔记 | Cpp STL 总结自用</title>
    <link href="https://maizehsu.me/2022/08/16/2-notes-for-leetcode-stl/"/>
    <id>https://maizehsu.me/2022/08/16/2-notes-for-leetcode-stl/</id>
    <published>2022-08-15T17:00:00.000Z</published>
    <updated>2022-08-15T17:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>特点：</p><ul><li>拥有一段连续的内存空间，并且起始地址不变，因此它能非常好的支持随机存取，但由于它的内存空间是连续的，所以在中间进行插入和删除会造成内存块的拷贝。另外，当该数组后的内存空间不够时，需要重新申请一块足够大的内存并进行内存的拷贝。这些都大大影响了 vector 的效率；</li><li>对头部和中间进行插入删除元素操作需要移动内存，如果你的元素是结构或类，那么移动的同时还会进行构造和析构操作，所以性能不高；</li><li>对最后元素操作最快（在后面插入删除元素最快），此时一般不需要移动内存，只有保留内存不够时才需要。</li></ul></li><li><p>优点：支持随机访问，查询效率高。</p></li><li><p>缺点：当向其头部或中部插入或删除元素时，为了保持原本的相对次序，插入或删除点之后的所有元素都必须移动，所以插入的效率比较低。</p></li><li><p>适用场景：适用于对象简单，变化较小，并且频繁随机访问的场景。</p></li><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//obj中含有obj_num个obj_init_value为值的type</span></span><br><span class="line">vector&lt;type&gt;<span class="built_in">obj</span>(obj_num, obj_init_value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj1为obj2的复制</span></span><br><span class="line">vertor&lt;type&gt;<span class="built_in">obj1</span>(obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj1为obj2的前三个元素复制</span></span><br><span class="line">vector&lt;type&gt;<span class="built_in">obj1</span>(obj2.<span class="built_in">begin</span>(), obj2.<span class="built_in">begin</span>()+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从数组中获得初值</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">7</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">obj</span><span class="params">(a, a+<span class="number">7</span>)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>push_back(elem), pop_back() 实现在容器最后添加 &#x2F; 删除元素，顺序读取，迭代器读取</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push_back(elem) 在数组最后添加数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  &#123;</span><br><span class="line">        obj.<span class="built_in">push_back</span>(i);</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 去掉数组最后一个数据</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it=obj.<span class="built_in">begin</span>(); it!=obj.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">       obj.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在第一个元素前面插入5</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">it = obj.<span class="built_in">begin</span>();</span><br><span class="line">obj.<span class="built_in">insert</span>(it, <span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p>clear() 清除所有数据，empty() 判断是否为空</p></li><li><p>obj.front() 和 obj.back() 返回第一项和最后一项</p></li><li><p>begin() 得到数组头的指针，end() 得到数组的最后一个单元 + 1 的指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;obj;</span><br><span class="line"></span><br><span class="line">    obj.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    obj.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    obj.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(obj.<span class="built_in">begin</span>(), obj.<span class="built_in">end</span>()); <span class="comment">//从小到大</span></span><br><span class="line">    <span class="built_in">reverse</span>(obj.<span class="built_in">begin</span>(),obj.<span class="built_in">end</span>()); <span class="comment">//从大到小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找10，若存在返回其在向量中的位置，需要include&lt;algorithm&gt;</span></span><br><span class="line"> <span class="built_in">find</span>(obj.<span class="built_in">begin</span>(), obj.<span class="built_in">end</span>(), <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>特点：</p><ul><li>deque 允许使用常数项时间对头端进行元素的插入和删除操作；</li><li>deque 没有容量的概念，因为它是动态的以分段连续空间组合而成，随时可以增加一段新的空间并链接起来，换句话说，像vector那样“旧空间不足而重新配置一块更大空间，然后复制元素，再释放旧空间”这样的事情在deque身上是不会发生的。也因此，deque没有必须要提供所谓的空间保留（reserve）功能。虽然deque 容器也提供了Random Access Iterator，但是它的迭代器并不是普通的指针， 其复杂度和 vector不是一个量级，这当然影响各个运算的层面；</li><li>除非有必要，我们应该尽可能的使用 vector，而不是 deque。对 deque 进行的排序操作，为了最高效率，可将 deque 先完整的复制到一个 vector 中，对 vector 容器进行排序，再复制回 deque。</li></ul></li><li><p>优点：支持随机访问，查询效率高；可在两端进行push、pop。</p></li><li><p>缺点：不适合中间插入删除操作；占用内存高。</p></li><li><p>适用场景：只有需要在首端进行插入&#x2F;删除操作的时候，还要兼顾随机访问效率，才选择deque，否则都选择vector。</p></li><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认构造形式</span></span><br><span class="line">deque&lt;T&gt; deqT;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数将[beg, end)区间中的元素拷贝给本身</span></span><br><span class="line"><span class="built_in">deque</span>(beg, end);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数将n个elem拷贝给本身</span></span><br><span class="line"><span class="built_in">deque</span>(n, elem);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="built_in">deque</span>(<span class="type">const</span> deque &amp;deq);</span><br></pre></td></tr></table></figure></li><li><p>其他函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回容器中元素的个数</span></span><br><span class="line">deque.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断容器是否为空</span></span><br><span class="line">deque.<span class="built_in">empty</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值填充新位置；如果容器变短，则删除末尾超出容器长度的元素</span></span><br><span class="line">deque.<span class="built_in">resize</span>(num, elem);</span><br></pre></td></tr></table></figure></li></ul><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>特点：</p><ul><li>没有空间预留习惯，所以每分配一个元素都会从内存中分配，每删除一个元素都会释放它占用的内存；</li><li>在哪里添加删除元素性能都很高，不需要移动内存，当然也不需要对每个元素都进行构造与析构了，所以常用来做随机插入和删除操作容器；</li><li>访问开始和最后两个元素最快，其他元素的访问时间一样。</li></ul></li><li><p>优点：内存不连续，动态操作，可在任意位置插入或删除且效率高。</p></li><li><p>缺点：不支持随机访问。</p></li><li><p>适用场景：经常进行插入和删除操作并且不经常随机访问的场景。</p></li><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个包含 n 个元素的 list 容器，并为每个元素指定初始值</span></span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">value1</span><span class="params">(<span class="number">10</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在已有 list 容器的情况下，通过拷贝该容器可以创建新的 list 容器</span></span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">value2</span><span class="params">(value1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过拷贝其他类型容器（或者普通数组）中指定区域内的元素，可以创建新的 list 容器</span></span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="function">std::list&lt;<span class="type">int</span>&gt; <span class="title">values</span><span class="params">(a, a+<span class="number">5</span>)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>删除特定位置元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val.<span class="built_in">erase</span>(pos);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>特点：</p><ul><li>set 中的元素都是排好序的，集合中没有重复的元素;</li><li>map 和 set 的插入删除效率比用其他序列容器高，因为对于关联容器来说，不需要做内存拷贝和内存移动。</li></ul></li><li><p>优点：使用平衡二叉树实现，便于元素查找，且保持了元素的唯一性，以及能自动排序。</p></li><li><p>缺点：每次插入值的时候，都需要调整红黑树，效率有一定影响。</p></li><li><p>适用场景：适用于经常查找一个元素是否在某群集中且需要排序的场景。</p></li><li><p>特点 1：不重复，自动排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; setT;</span><br><span class="line"></span><br><span class="line">setT.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">setT.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">setT.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">setT.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span> (it = setTemp.<span class="built_in">begin</span>(); it != setTemp.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>特点 2：关联性容器，键值对默认1，2，3</p></li><li><p>multiset 可以包含重复元素</p></li><li><p>unordered_set 用哈希表存储，无序但查找快</p></li></ul><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>特点：</p><ul><li>自动建立 Key - value 的对应。key 和 value 可以是任意你需要的类型；</li><li>根据 key 值快速查找记录，查找的复杂度基本是 O ( log N )，如果有 1000 个记录，二分查找最多查找 10次；</li><li>增加和删除节点对迭代器的影响很小，除了那个操作节点，对其他的节点都没有什么影响；</li><li>对于迭代器来说，可以修改实值，而不能修改 key。</li></ul></li><li><p>优点：使用平衡二叉树实现，便于元素查找，且保持了元素的唯一性，可以创建字典；</p></li><li><p>缺点：每次插入值的时候，都需要调整红黑树，效率有一定影响。</p></li><li><p>适用场景：适用于需要存储一个数据字典，并要求方便地根据 key 找 value 的场景。</p></li><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创造一个键值对</span></span><br><span class="line">std::map&lt;std::string, <span class="type">int</span>&gt; myMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提前进行初始化</span></span><br><span class="line">std::map&lt;std::string, <span class="type">int</span>&gt; myMap&#123; &#123;<span class="string">&quot;C语言教程&quot;</span>,<span class="number">10</span>&#125;,&#123;<span class="string">&quot;STL教程&quot;</span>,<span class="number">20</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// map 容器中存储的键值对，其本质都是 pair 类模板创建的 pair 对象</span></span><br><span class="line">std::map&lt;std::string, <span class="type">int</span>&gt;myMap&#123;std::<span class="built_in">make_pair</span>(<span class="string">&quot;C语言教程&quot;</span>,<span class="number">10</span>), std::<span class="built_in">make_pair</span>(<span class="string">&quot;STL教程&quot;</span>,<span class="number">20</span>)&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h4><ul><li>特点<ul><li>vector 头部与中间插入和删除效率较低，在尾部插入和删除效率高，支持随机访问；</li><li>deque 是在头部和尾部插入和删除效率较高，支持随机访问，但效率没有 vector 高；</li><li>list 在任意位置的插入和删除效率都较高，但不支持随机访问；</li><li>set 由红黑树实现，其内部元素依据其值自动排序，每个元素值只能出现一次，不允许重复，且插入和删除效率比用其他序列容器高；</li><li>map 可以自动建立 Key - value 的对应，key 和 value 可以是任意你需要的类型，根据 key 快速查找记录。</li></ul></li><li>适用场景<ul><li>如果需要高效的随机存取，不在乎插入和删除的效率，使用 vector；</li><li>如果需要大量的插入和删除元素，不关心随机存取的效率，使用 list；</li><li>如果需要随机存取，并且关心两端数据的插入和删除效率，使用 deque；</li><li>如果打算存储数据字典，并且要求方便地根据 key 找到 value，一对一的情况使用 map，一对多的情况使用 multimap；</li><li>如果打算查找一个元素是否存在于某集合中，唯一存在的情况使用 set，不唯一存在的情况使用 multiset。</li></ul></li><li>时间复杂度<ul><li>vector 在头部和中间位置插入和删除的时间复杂度为 O ( N ) ，在尾部插入和删除的时间复杂度为 O ( 1 ) ，查找的时间复杂度为 O ( 1 ) ；</li><li>deque 在中间位置插入和删除的时间复杂度为 O ( N ) ，在头部和尾部插入和删除的时间复杂度为 O ( 1 ) ，查找的时间复杂度为 O ( 1 ) ；</li><li>list 在任意位置插入和删除的时间复杂度都为 O ( 1 ) ，查找的时间复杂度为 O ( N ) ；</li><li>set 和 map 都是通过红黑树实现，因此插入、删除和查找操作的时间复杂度都是 O ( log N ) 。</li></ul></li></ul><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><blockquote><p>[1]. <a href="https://zhuanlan.zhihu.com/p/130905242">https://zhuanlan.zhihu.com/p/130905242</a></p><p>[2]. <a href="https://blog.51cto.com/u_15452541/4955600">https://blog.51cto.com/u_15452541/4955600</a></p></blockquote>]]></content>
    
    
    <summary type="html">记于大二春季刚接触 leetcode 时</summary>
    
    
    
    <category term="Tech" scheme="https://maizehsu.me/categories/Tech/"/>
    
    <category term="Algorithm" scheme="https://maizehsu.me/categories/Tech/Algorithm/"/>
    
    
    <category term="笔记" scheme="https://maizehsu.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Leetcode" scheme="https://maizehsu.me/tags/Leetcode/"/>
    
    <category term="秋招" scheme="https://maizehsu.me/tags/%E7%A7%8B%E6%8B%9B/"/>
    
    <category term="自查" scheme="https://maizehsu.me/tags/%E8%87%AA%E6%9F%A5/"/>
    
    <category term="补档" scheme="https://maizehsu.me/tags/%E8%A1%A5%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>The Start of Everything</title>
    <link href="https://maizehsu.me/2022/08/15/1-the-start-of-everything/"/>
    <id>https://maizehsu.me/2022/08/15/1-the-start-of-everything/</id>
    <published>2022-08-15T03:39:20.000Z</published>
    <updated>2023-08-01T16:32:18.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>The Start of Everything</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Dailies" scheme="https://maizehsu.me/categories/Dailies/"/>
    
    
    <category term="随想" scheme="https://maizehsu.me/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>
